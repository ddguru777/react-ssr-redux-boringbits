{"version":3,"sources":["../../../../src/node_modules/boring-config/test/config-test.js"],"names":["assert","require","describe","it","boring","ok","config","get","has","equal","deepEqual","bar","baz","undefined"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEAC,QAAQ,CAAC,eAAD,EAAkB,YAAW;AACnCC,EAAAA,EAAE,CAAC,sBAAD,EAAyB,YAAW;AACpC,UAAMC,MAAM,GAAGH,OAAO,CAAC,iBAAD,CAAtB;;AACAD,IAAAA,MAAM,CAACK,EAAP,CAAUD,MAAV;AACAJ,IAAAA,MAAM,CAACK,EAAP,CAAUD,MAAM,CAACE,MAAjB;AACAN,IAAAA,MAAM,CAACK,EAAP,CAAUD,MAAM,CAACE,MAAP,CAAcC,GAAxB;AACAP,IAAAA,MAAM,CAACK,EAAP,CAAUD,MAAM,CAACE,MAAP,CAAcE,GAAxB;AACD,GANC,CAAF;AAQAL,EAAAA,EAAE,CAAC,0BAAD,EAA6B,MAAM;AAEnC,UAAMG,MAAM,GAAGL,OAAO,CAAC,iBAAD,CAAP,CAA2BK,MAA1C;;AACAN,IAAAA,MAAM,CAACS,KAAP,CAAaH,MAAM,CAACC,GAAP,CAAW,UAAX,CAAb,EAAqC,IAArC;AACAP,IAAAA,MAAM,CAACS,KAAP,CAAaH,MAAM,CAACC,GAAP,CAAW,iBAAX,CAAb,EAA4C,IAA5C,EAAkD,wFAAlD;AAGD,GAPC,CAAF;AASAJ,EAAAA,EAAE,CAAC,0BAAD,EAA6B,MAAM;AAEnC,UAAMG,MAAM,GAAGL,OAAO,CAAC,iBAAD,CAAP,CAA2BK,MAA1C;;AACAN,IAAAA,MAAM,CAACS,KAAP,CAAaH,MAAM,CAACC,GAAP,CAAW,gBAAX,CAAb,EAA2C,MAA3C,EAAmD,qCAAnD;AACAP,IAAAA,MAAM,CAACS,KAAP,CAAaH,MAAM,CAACC,GAAP,CAAW,gBAAX,CAAb,EAA2C,MAA3C,EAAmD,yDAAnD;AACAP,IAAAA,MAAM,CAACU,SAAP,CAAiBJ,MAAM,CAACC,GAAP,CAAW,YAAX,CAAjB,EAA2C;AAACI,MAAAA,GAAG,EAAE,WAAN;AAAmBC,MAAAA,GAAG,EAAE;AAAxB,KAA3C,EAA4E,qCAA5E;AAGD,GARC,CAAF;AASA;;;;;;;;AAOAT,EAAAA,EAAE,CAAC,0CAAD,EAA6C,MAAM;AAEnD,UAAMG,MAAM,GAAGL,OAAO,CAAC,iBAAD,CAAP,CAA2BK,MAA1C;;AACAN,IAAAA,MAAM,CAACS,KAAP,CAAaH,MAAM,CAACC,GAAP,CAAW,WAAX,CAAb,EAAsCM,SAAtC;AAED,GALC,CAAF;AAQD,CA1CO,CAAR","sourcesContent":["var assert = require('assert');\n\ndescribe('Boring config', function() {\n  it('should export config', function() {\n    const boring = require('../../../boring');\n    assert.ok(boring);\n    assert.ok(boring.config);\n    assert.ok(boring.config.get);\n    assert.ok(boring.config.has);\n  });\n\n  it('should get key in config', () => {\n    \n    const config = require('../../../boring').config;\n    assert.equal(config.get('app.port'), 4000);\n    assert.equal(config.get('boring.app.port'), 4000, 'Since we are setting all keys under boring it will should show up under boring as well');\n\n\n  })\n\n  it('should get key from .env', () => {\n    \n    const config = require('../../../boring').config;\n    assert.equal(config.get('boring.foo.bar'), 'beep', 'Value should be overriden from .env');\n    assert.equal(config.get('boring.foo.baz'), 'meep', 'Value should come from testing.js, but merged from .env');\n    assert.deepEqual(config.get('boring.foo'), {bar: 'overriden', baz: 'meep'}, 'just showing one current deificency');\n\n\n  })\n  /**\n   * This is one key enhancment from the `config` API. \n   * config throws if there is no key present, which \n   * we understand the principle / reasoning behind this\n   * but would rather have the app deal with an \n   * undefined (or falsy value) rather than catching\n   */\n  it('should not blow up if key is not present', () => {\n    \n    const config = require('../../../boring').config;\n    assert.equal(config.get('23423f23f'), undefined);\n    \n  })\n\n\n});"],"file":"config-test.js"}