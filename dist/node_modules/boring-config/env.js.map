{"version":3,"sources":["../../../src/node_modules/boring-config/env.js"],"names":["fs","require","path","process","env","NODE_ENV","dotenv","cwd","dotenvFiles","filter","Boolean","forEach","dotenvFile","toLowerCase","existsSync","console","log","config","appDirectory","realpathSync","NODE_PATH","split","delimiter","folder","isAbsolute","map","resolve","join","REACT_APP","getClientEnvironment","publicUrl","raw","Object","keys","key","test","reduce","PUBLIC_URL","stringified","JSON","stringify","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * This is pretty much copied from Create React App's env.jss\r\n */\r\n\r\n'use strict';\r\n\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\nif (!process.env.NODE_ENV) {\r\n  // don't throw, just set it development which is a node config convention\r\n  process.env.NODE_ENV = 'development';\r\n  // throw new Error(\r\n  //   'The NODE_ENV environment variable is required but was not specified.'\r\n  // );\r\n}\r\nconst NODE_ENV = process.env.NODE_ENV;\r\n\r\n\r\nconst dotenv = process.cwd() + '/.env'\r\n\r\n// https://github.com/bkeepers/dotenv#what-other-env-files-can-i-use\r\nvar dotenvFiles = [\r\n  `${dotenv}.${NODE_ENV}.local`,\r\n  `${dotenv}.${NODE_ENV}`,\r\n  // Don't include `.env.local` for `test` environment\r\n  // since normally you expect tests to produce the same\r\n  // results for everyone\r\n  NODE_ENV !== 'test' && `${dotenv}.local`,\r\n  dotenv,\r\n].filter(Boolean);\r\n\r\n// Load environment variables from .env* files. Suppress warnings using silent\r\n// if this file is missing. dotenv will never modify any environment variables\r\n// that have already been set.\r\n// https://github.com/motdotla/dotenv\r\ndotenvFiles.forEach(dotenvFile => {\r\n  dotenvFile = dotenvFile.toLowerCase();\r\n  if (fs.existsSync(dotenvFile)) {\r\n    console.log('requiring via dotenv: ', dotenvFile)\r\n    require('dotenv').config({\r\n      path: dotenvFile,\r\n    });\r\n  }\r\n});\r\n\r\n// We support resolving modules according to `NODE_PATH`.\r\n// This lets you use absolute paths in imports inside large monorepos:\r\n// https://github.com/facebookincubator/create-react-app/issues/253.\r\n// It works similar to `NODE_PATH` in Node itself:\r\n// https://nodejs.org/api/modules.html#modules_loading_from_the_global_folders\r\n// Note that unlike in Node, only *relative* paths from `NODE_PATH` are honored.\r\n// Otherwise, we risk importing Node.js core modules into an app instead of Webpack shims.\r\n// https://github.com/facebookincubator/create-react-app/issues/1023#issuecomment-265344421\r\n// We also resolve them to make sure all tools using them work consistently.\r\nconst appDirectory = fs.realpathSync(process.cwd());\r\nprocess.env.NODE_PATH = (process.env.NODE_PATH || '')\r\n  .split(path.delimiter)\r\n  .filter(folder => folder && !path.isAbsolute(folder))\r\n  .map(folder => path.resolve(appDirectory, folder))\r\n  .join(path.delimiter);\r\n\r\n// Grab NODE_ENV and REACT_APP_* environment variables and prepare them to be\r\n// injected into the application via DefinePlugin in Webpack configuration.\r\nconst REACT_APP = /^REACT_APP_/i;\r\n\r\nfunction getClientEnvironment(publicUrl) {\r\n  const raw = Object.keys(process.env)\r\n    .filter(key => REACT_APP.test(key))\r\n    .reduce(\r\n      (env, key) => {\r\n        env[key] = process.env[key];\r\n        return env;\r\n      },\r\n      {\r\n        // Useful for determining whether weâ€™re running in production mode.\r\n        // Most importantly, it switches React into the correct mode.\r\n        NODE_ENV: process.env.NODE_ENV || 'development',\r\n        // Useful for resolving the correct path to static assets in `public`.\r\n        // For example, <img src={process.env.PUBLIC_URL + '/img/logo.png'} />.\r\n        // This should only be used as an escape hatch. Normally you would put\r\n        // images into the `src` and `import` them in code to get their paths.\r\n        PUBLIC_URL: publicUrl,\r\n      }\r\n    );\r\n  // Stringify all values so we can feed into Webpack DefinePlugin\r\n  const stringified = {\r\n    'process.env': Object.keys(raw).reduce((env, key) => {\r\n      env[key] = JSON.stringify(raw[key]);\r\n      return env;\r\n    }, {}),\r\n  };\r\n\r\n  return { raw, stringified };\r\n}\r\n\r\nmodule.exports = getClientEnvironment;\r\n"],"file":"env.js"}