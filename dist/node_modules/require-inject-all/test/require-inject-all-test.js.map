{"version":3,"sources":["../../../../src/node_modules/require-inject-all/test/require-inject-all-test.js"],"names":["assert","require","describe","it","equal","inject","results","deepEqual","objectToPass","testKey","process","cwd","Object","keys","length","ok","indexOf","no_promise_returned","modAInfo","modBInfo","error","fail","e","message"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAGAC,QAAQ,CAAC,oBAAD,EAAuB,YAAW;AACxCC,EAAAA,EAAE,CAAC,+DAAD,EAAkE,kBAAiB;AACnFH,IAAAA,MAAM,CAACI,KAAP,CAAa,CAAb,EAAgB,CAAhB;;AACA,UAAMC,MAAM,GAAGJ,OAAO,CAAC,KAAD,CAAtB;;AAEA,QAAIK,OAAO,GAAG,MAAMD,MAAM,CAAC,mBAAD,CAA1B;AACAL,IAAAA,MAAM,CAACO,SAAP,CAAiBD,OAAjB,EAA0B,EAA1B,EAA8B,iBAA9B;AAED,GAPC,CAAF;AASAH,EAAAA,EAAE,CAAC,2BAAD,EAA8B,kBAAiB;AAE/C,UAAME,MAAM,GAAGJ,OAAO,CAAC,UAAD,CAAtB;;AACA,UAAMO,YAAY,GAAG;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACA,QAAIH,OAAO,GAAG,MAAMD,MAAM,CAACK,OAAO,CAACC,GAAR,KAAgB,wDAAjB,EAA2EH,YAA3E,CAA1B;AAEAR,IAAAA,MAAM,CAACI,KAAP,CAAaQ,MAAM,CAACC,IAAP,CAAYP,OAAZ,EAAqBQ,MAAlC,EAA0C,CAA1C,EAA6C,qCAA7C;AACAd,IAAAA,MAAM,CAACe,EAAP,CAAUH,MAAM,CAACC,IAAP,CAAYP,OAAZ,EAAqBU,OAArB,CAA6B,gBAA7B,KAAgD,CAA1D;AACAhB,IAAAA,MAAM,CAACe,EAAP,CAAUH,MAAM,CAACC,IAAP,CAAYP,OAAZ,EAAqBU,OAArB,CAA6B,kBAA7B,KAAkD,CAA5D;AACAhB,IAAAA,MAAM,CAACe,EAAP,CAAUH,MAAM,CAACC,IAAP,CAAYP,OAAZ,EAAqBU,OAArB,CAA6B,qBAA7B,KAAqD,CAA/D;AACAhB,IAAAA,MAAM,CAACI,KAAP,CAAaE,OAAO,CAACW,mBAArB,EAA0C,oBAA1C;AAEAjB,IAAAA,MAAM,CAACI,KAAP,CAAaI,YAAY,CAACC,OAA1B,EAAmC,MAAnC,EAA2C,qCAA3C;AACAT,IAAAA,MAAM,CAACI,KAAP,CAAaI,YAAY,CAACU,QAA1B,EAAoC,OAApC,EAA6C,wDAA7C;AACAlB,IAAAA,MAAM,CAACI,KAAP,CAAaI,YAAY,CAACW,QAA1B,EAAoC,MAApC,EAA4C,wDAA5C;AAGD,GAjBC,CAAF;AAmBAhB,EAAAA,EAAE,CAAC,iCAAD,EAAoC,kBAAiB;AACrD,UAAME,MAAM,GAAGJ,OAAO,CAAC,UAAD,CAAtB;;AACA,QAAImB,KAAJ;;AAEA,QAAI;AACF,UAAId,OAAO,GAAG,MAAMD,MAAM,CAACK,OAAO,CAACC,GAAR,KAAgB,uDAAjB,CAA1B;AACAX,MAAAA,MAAM,CAACqB,IAAP,CAAY,uBAAZ;AACD,KAHD,CAIA,OAAOC,CAAP,EAAU;AACRF,MAAAA,KAAK,GAAGE,CAAR;AACD;;AACDtB,IAAAA,MAAM,CAACI,KAAP,CAAagB,KAAK,CAACG,OAAnB,EAA4B,MAA5B,EAAoC,4BAApC;AAED,GAbC,CAAF;AAeD,CA5CO,CAAR","sourcesContent":["var assert = require('assert');\n\n\ndescribe('Require Inject All', function() {\n  it('will resolve with empty array if the directory does not exist', async function() {\n    assert.equal(1, 1)\n    const inject = require('../');\n\n    var results = await inject('wefoij23/sadflifj')\n    assert.deepEqual(results, [], 'Should be empty');\n    \n  });\n\n  it('should find three modules', async function() {\n    \n    const inject = require('../index');\n    const objectToPass = { testKey: 'bark' };\n    var results = await inject(process.cwd() + '/src/node_modules/require-inject-all/test/test-modules', objectToPass)\n\n    assert.equal(Object.keys(results).length, 3, 'There should be two endpoints found')\n    assert.ok(Object.keys(results).indexOf('modA_in_folder')>=0)\n    assert.ok(Object.keys(results).indexOf('modB_file_module')>=0)\n    assert.ok(Object.keys(results).indexOf('no_promise_returned')>=0)\n    assert.equal(results.no_promise_returned, 'I am not a promise');\n\n    assert.equal(objectToPass.testKey, 'bark', 'The test key should not be modified');\n    assert.equal(objectToPass.modAInfo, 'hello', 'Module A should have put a prop modAInfo on the object');\n    assert.equal(objectToPass.modBInfo, 'meow', 'Module B should have put a prop modBInfo on the object');\n\n\n  });\n\n  it('should throw if a module throws', async function() {\n    const inject = require('../index');\n    let error;\n\n    try {\n      var results = await inject(process.cwd() + '/src/node_modules/require-inject-all/test/junk-folder')\n      assert.fail('Should not reach here');\n    }\n    catch (e) {\n      error = e;\n    }\n    assert.equal(error.message, 'Derp', 'catch was excepting to run');\n\n  });\n\n});"],"file":"require-inject-all-test.js"}