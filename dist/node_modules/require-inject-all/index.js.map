{"version":3,"sources":["../../../src/node_modules/require-inject-all/index.js"],"names":["glob","require","path","logger","util","globber","promisify","module","exports","requireAll","directories","args","Array","info","dirFiles","Promise","all","map","directory","files","reduce","prev","cur","concat","filter","file","indexOf","promiseList","ret","apply","resolve","reject","results","val","index","basename"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,eAAD,CAAtB;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AAEAI,OAAO,GAAGD,IAAI,CAACE,SAAL,CAAeN,IAAf,CAAV;AAEA;;;;;;;;;;;;;;;;AAeAO,MAAM,CAACC,OAAP,GAAiB,eAAeC,UAAf,CAA0BC,WAA1B,EAAuC,GAAGC,IAA1C,EAAgD;AAE/D,MAAI,EAAED,WAAW,YAAYE,KAAzB,CAAJ,EAAqCF,WAAW,GAAG,CAACA,WAAD,CAAd;AAErCP,EAAAA,MAAM,CAACU,IAAP,CAAYH,WAAZ,EAAyB,qCAAzB;AAEA,QAAMI,QAAQ,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYN,WAAW,CAACO,GAAZ,CAAgBC,SAAS,IAAI;AAC9D,WAAOb,OAAO,CAACa,SAAS,GAAG,IAAb,CAAd;AACD,GAFkC,CAAZ,CAAvB;AAIA,QAAMC,KAAK,GAAGL,QAAQ,CAACM,MAAT,CAAgB,CAACC,IAAD,EAAOC,GAAP,KAAe;AAC3C,WAAOD,IAAI,CAACE,MAAL,CAAYD,GAAZ,CAAP;AACD,GAFa,EAEX,EAFW,EAEPE,MAFO,CAEAC,IAAI,IAAI;AACpB,WAAOA,IAAI,CAACC,OAAL,CAAa,MAAb,IAAqB,CAA5B;AACD,GAJa,CAAd;AAMA,QAAMC,WAAW,GAAGR,KAAK,CAACF,GAAN,CAAU,gBAAeQ,IAAf,EAAqB;AACjD,QAAIG,GAAG,GAAG3B,OAAO,CAACwB,IAAD,CAAP,CAAcI,KAAd,CAAoB,IAApB,EAA0BlB,IAA1B,CAAV;;AACA,QAAI,EAAEiB,GAAG,YAAYb,OAAjB,CAAJ,EAA+B;AAC7B;AACA,aAAO,IAAIA,OAAJ,CAAY,CAACe,OAAD,EAAUC,MAAV,KAAqBD,OAAO,CAACF,GAAD,CAAxC,CAAP;AACD;;AACD,WAAOA,GAAP;AACD,GAPmB,CAApB;AASA,QAAMI,OAAO,GAAG,MAAMjB,OAAO,CAACC,GAAR,CAAYW,WAAZ,CAAtB;AAEA,SAAOK,OAAO,CAACZ,MAAR,CAAe,UAASC,IAAT,EAAeY,GAAf,EAAoBC,KAApB,EAA2B;AAC/C,QAAIC,QAAQ,GAAGjC,IAAI,CAACiC,QAAL,CAAchB,KAAK,CAACe,KAAD,CAAnB,EAA4B,KAA5B,CAAf;AACAb,IAAAA,IAAI,CAACc,QAAD,CAAJ,GAAiBF,GAAjB;AACA,WAAOZ,IAAP;AACD,GAJM,EAIJ,EAJI,CAAP;AAMD,CAjCD","sourcesContent":["const glob = require('glob');\nconst path = require('path');\nconst logger = require('boring-logger')\nconst util = require('util');\n\nglobber = util.promisify(glob);\n\n/**\n * Require all the files / folders\n * as modules in the given directory. \n * \n * Then the required module will be invoked\n * where the remaining arguments are passed \n * as parameters uniformly to each module. \n * \n * Each module is expexted to return a function\n * to be exectued where the return function must \n * return a promise \n * \n * @param {path to directory} directory \n * @param  {...any} args \n */\nmodule.exports = async function requireAll(directories, ...args) {\n\n  if (!(directories instanceof Array)) directories = [directories];\n\n  logger.info(directories, 'Requring all modules in directories');\n\n  const dirFiles = await Promise.all(directories.map(directory => {\n    return globber(directory + '/*');\n  }))\n\n  const files = dirFiles.reduce((prev, cur) => {\n    return prev.concat(cur);\n  }, []).filter(file => {\n    return file.indexOf('.map')<0;\n  })\n  \n  const promiseList = files.map(async function(file) {\n    let ret = require(file).apply(null, args)\n    if (!(ret instanceof Promise)) {\n      // wrap in a promise that is immediately resolved\n      return new Promise((resolve, reject) => resolve(ret));\n    }\n    return ret\n  });\n\n  const results = await Promise.all(promiseList);\n  \n  return results.reduce(function(prev, val, index) {\n    let basename = path.basename(files[index], '.js');\n    prev[basename] = val;\n    return prev;\n  }, {});\n  \n}"],"file":"index.js"}