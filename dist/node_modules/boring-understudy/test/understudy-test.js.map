{"version":3,"sources":["../../../../src/node_modules/boring-understudy/test/understudy-test.js"],"names":["assert","require","Understudy","describe","it","done","ok","tester","options","foo","before","localOptions","speak","Promise","resolve","setTimeout","equal","transport","after","move","perform","work","Object","keys","length","then","finalOptions","catch","e","fail","reject","Error","next","message","notStrictEqual","caught","resovle"],"mappings":"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","sourcesContent":["var assert = require('assert');\nconst Understudy = require('boring-understudy');\n\ndescribe('Understudy Promisified', function() {\n\n  it('will return a promise from perform', (done) => {\n\n    assert.ok(Understudy);\n\n    const tester = new Understudy();\n    assert.ok(tester);\n\n    const options =  {foo: 'bar'};\n\n    tester.before('beep', function(localOptions) {\n      localOptions.speak = 'meow'\n\n      return new Promise(resolve => {\n        setTimeout(resolve, 300);\n      });\n    })\n\n    tester.before('beep', function(localOptions) {\n\n      assert.equal(localOptions.speak, 'meow');\n      localOptions.transport = 'walk';\n\n      // does not need to return a promise, it will just be wrapped and returned sync\n    });\n\n    tester.after('beep', function(localOptions) {\n\n      assert.equal(localOptions.transport, 'walk');\n      localOptions.move = 'wiggle';\n      return new Promise(resolve => resolve());\n    });\n\n    tester.perform('beep', options, function work() {\n      assert.equal(Object.keys(options).length, 3);\n      return new Promise(resolve => resolve(options));\n    }).then((finalOptions) => {\n      assert.equal(Object.keys(options).length, 4);\n      assert.equal(finalOptions.foo, 'bar');\n      assert.equal(finalOptions.speak, 'meow');\n      assert.equal(finalOptions.transport, 'walk');\n      assert.equal(finalOptions.move, 'wiggle');\n\n      done();\n    }).catch(e => {\n      assert.fail(e);\n    })\n  });\n\n  it('will call the catch if a before rejects', done => {\n\n    const tester = new Understudy();\n\n    tester.before('beep', () => {\n      return Promise.reject(new Error('thrown from before'));\n    });\n\n    tester.perform('beep', function(next) {\n      assert.fail('should not be hit');\n    })\n    .then(() => assert.fail('Should not be resolved'))\n    .catch((e) => {\n      assert.equal(e.message, 'thrown from before');\n      done();\n    })\n  });\n\n\n  it('will call the catch if a before rejects with no reject reason', done => {\n\n    const tester = new Understudy();\n\n    tester.before('beep', () => {\n      return Promise.reject();\n    });\n\n    tester.perform('beep', function(next) {\n      return Promise.reject('should not be hit');\n    })\n    .then(() => assert.fail('Should not be resolved'))\n    .catch((e) => {\n      assert.notStrictEqual(e, 'should not be hit');\n      done();\n    })\n  });\n\n\n  it('will call the catch if thrown on before', async () => {\n\n    const tester = new Understudy();\n    let caught = false;\n\n    tester.before('beep', () => {\n      throw new Error('thrown from before');\n    })\n\n    try {\n      await tester.perform('beep', function(next) {\n        assert.fail('should not be hit');\n      })\n      assert.fail('Should not be resolved')\n    }\n    catch(e) {\n      caught = true;\n      assert.equal(e.message, 'thrown from before');\n    }\n\n    assert.ok(caught, 'make sure caught was ran');\n\n  });\n\n\n  it('will call the catch if thrown on perform', async () => {\n\n    const tester = new Understudy();\n    let caught = false;\n\n    try {\n      await tester.perform('beep', function(next) {\n        throw new Error('thrown from perform');\n      })\n      assert.fail('Should not be resolved')\n    }\n    catch(e) {\n      caught = true;\n      assert.equal(e.message, 'thrown from perform');\n    }\n\n    assert.ok(caught, 'make sure caught was ran');\n\n  });\n\n  it('will call the catch if thrown on after', (done) => {\n\n    const tester = new Understudy();\n    let caught = false;\n\n    tester.after('beep', () => {\n      throw new Error('thrown from after');\n    })\n\n    tester.perform('beep', function(next) {\n        // no op\n    }).then(() =>  assert.fail('Should not be resolved'))\n    .catch((e) => {\n      caught = true;\n      assert.equal(e.message, 'thrown from after');\n      done();\n    });\n\n  });\n\n\n\n\n  it('will call the catch if the work fn in perform throws', done => {\n\n    const tester = new Understudy();\n\n    tester.before('beep', () => {\n      return new Promise((resovle, reject) => {\n        resovle();\n      })\n    })\n\n    tester.perform('beep', function() {\n      return new Promise((resolve, reject) => reject(new Error('thrown from peform')));\n    })\n    .then(() => assert.fail('Should not be resolved'))\n    .catch((e) => {\n      assert.equal(e.message, 'thrown from peform');\n      done();\n    })\n  });\n\n});"],"file":"understudy-test.js"}