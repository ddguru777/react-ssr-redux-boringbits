{"version":3,"sources":["../../../../src/node_modules/injecture/test/injecture-test.js"],"names":["assert","require","describe","injecture","it","done","register","equal","create","ClassB","constructor","foo","registerClass","args","deepEqual","hello","factory_args","factory_context","ClassD","name","map_instances","instance_index_field","instance1","instance2","instances","allInstances","length"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAEAC,QAAQ,CAAC,WAAD,EAAc,YAAW;AAE/B,QAAMC,SAAS,GAAGF,OAAO,CAAC,UAAD,CAAzB;;AAEAG,EAAAA,EAAE,CAAC,gCAAD,EAAmCC,IAAI,IAAI;AAE3CF,IAAAA,SAAS,CAACG,QAAV,CAAmB,QAAnB,EAA6B,YAAW;AACtC,aAAO,GAAP;AACD,KAFD;AAIAN,IAAAA,MAAM,CAACO,KAAP,CAAaJ,SAAS,CAACK,MAAV,CAAiB,QAAjB,CAAb,EAAyC,GAAzC;AACAH,IAAAA,IAAI;AACL,GARC,CAAF;AAUAD,EAAAA,EAAE,CAAC,wCAAD,EAA2CC,IAAI,IAAI;AAEnD,UAAMI,MAAN,CAAa;AACXC,MAAAA,WAAW,GAAG;AACZ,aAAKC,GAAL,GAAW,KAAX;AACD;;AAHU;;AAMbR,IAAAA,SAAS,CAACS,aAAV,CAAwB,SAAxB,EAAmCH,MAAnC,EAA2C,EAA3C;AACAT,IAAAA,MAAM,CAACO,KAAP,CAAaJ,SAAS,CAACK,MAAV,CAAiB,SAAjB,EAA4BG,GAAzC,EAA8C,KAA9C;AACAN,IAAAA,IAAI;AACL,GAXC,CAAF;AAaAD,EAAAA,EAAE,CAAC,0DAAD,EAA6DC,IAAI,IAAI;AAErEF,IAAAA,SAAS,CAACG,QAAV,CAAmB,SAAnB,EAA8B,UAAS,GAAGO,IAAZ,EAAkB;AAE9Cb,MAAAA,MAAM,CAACc,SAAP,CAAiBD,IAAjB,EAAuB,CAAC,KAAD,EAAQ,KAAR,CAAvB;AACAb,MAAAA,MAAM,CAACc,SAAP,CAAiB,KAAKC,KAAtB,EAA6B,OAA7B;AACAV,MAAAA,IAAI;AAEL,KAND,EAMG;AAACW,MAAAA,YAAY,EAAE,CAAC,KAAD,EAAQ,KAAR,CAAf;AAA+BC,MAAAA,eAAe,EAAE;AAAEF,QAAAA,KAAK,EAAE;AAAT;AAAhD,KANH;AAQAZ,IAAAA,SAAS,CAACK,MAAV,CAAiB,SAAjB;AAED,GAZC,CAAF;AAcAJ,EAAAA,EAAE,CAAC,iCAAD,EAAoCC,IAAI,IAAI;AAE5C,UAAMa,MAAN,CAAa;AACXR,MAAAA,WAAW,CAACS,IAAD,EAAO;AAAC,aAAKA,IAAL,GAAYA,IAAZ;AAAkB;;AAD1B;;AAIbhB,IAAAA,SAAS,CAACG,QAAV,CAAmB,SAAnB,EAA8B,UAASa,IAAT,EAAe;AAC3C,aAAO,IAAID,MAAJ,CAAWC,IAAX,CAAP;AACD,KAFD,EAEG;AACDC,MAAAA,aAAa,EAAE,IADd;AAEDC,MAAAA,oBAAoB,EAAE;AAFrB,KAFH;AAOA,UAAMC,SAAS,GAAGnB,SAAS,CAACK,MAAV,CAAiB,SAAjB,EAA4B,MAA5B,CAAlB;AACA,UAAMe,SAAS,GAAGpB,SAAS,CAACK,MAAV,CAAiB,SAAjB,EAA4B,SAA5B,CAAlB;AAEA,UAAMgB,SAAS,GAAGrB,SAAS,CAACsB,YAAV,CAAuB,SAAvB,CAAlB;AAEAzB,IAAAA,MAAM,CAACO,KAAP,CAAae,SAAb,EAAwBE,SAAS,CAAC,CAAD,CAAjC;AACAxB,IAAAA,MAAM,CAACO,KAAP,CAAagB,SAAb,EAAwBC,SAAS,CAAC,CAAD,CAAjC;AACAxB,IAAAA,MAAM,CAACO,KAAP,CAAaiB,SAAS,CAACE,MAAvB,EAA+B,CAA/B;AAEArB,IAAAA,IAAI;AACL,GAvBC,CAAF;AAyBD,CAlEO,CAAR","sourcesContent":["const assert = require('assert');\n\ndescribe('Injecture', function() {\n\n  const injecture = require('../index');\n\n  it('will register a factory by key', done => {\n    \n    injecture.register('classA', function() {\n      return 'A'\n    });\n\n    assert.equal(injecture.create('classA'), 'A');\n    done();\n  })\n\n  it('will use a default factory for a class', done => {\n    \n    class ClassB {\n      constructor() {\n        this.foo = 'bar'\n      }\n    }\n\n    injecture.registerClass('class_b', ClassB, {});\n    assert.equal(injecture.create('class_b').foo, 'bar');\n    done();\n  })\n  \n  it('will call the factory with context and args from options', done => {\n    \n    injecture.register('class_c', function(...args) {\n\n      assert.deepEqual(args, ['foo', 'bar']);\n      assert.deepEqual(this.hello, 'there');\n      done();\n\n    }, {factory_args: ['foo', 'bar'], factory_context: { hello: 'there'}});\n\n    injecture.create('class_c');\n    \n  })\n\n  it('will map instances by key field', done => {\n\n    class ClassD {\n      constructor(name) {this.name = name;}\n     }\n\n    injecture.register('class_d', function(name) {\n      return new ClassD(name)\n    }, {\n      map_instances: true,\n      instance_index_field: 'name'\n    });\n\n    const instance1 = injecture.create('class_d', 'ryan');\n    const instance2 = injecture.create('class_d', 'stevens');\n\n    const instances = injecture.allInstances('class_d');\n\n    assert.equal(instance1, instances[0]);\n    assert.equal(instance2, instances[1]);\n    assert.equal(instances.length, 2);\n    \n    done();\n  })\n\n});"],"file":"injecture-test.js"}