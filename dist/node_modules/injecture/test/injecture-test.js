const assert = require('assert');

describe('Injecture', function () {
  const injecture = require('../index');

  it('will register a factory by key', done => {
    injecture.register('classA', function () {
      return 'A';
    });
    assert.equal(injecture.create('classA'), 'A');
    done();
  });
  it('will use a default factory for a class', done => {
    class ClassB {
      constructor() {
        this.foo = 'bar';
      }

    }

    injecture.registerClass('class_b', ClassB, {});
    assert.equal(injecture.create('class_b').foo, 'bar');
    done();
  });
  it('will call the factory with context and args from options', done => {
    injecture.register('class_c', function (...args) {
      assert.deepEqual(args, ['foo', 'bar']); // eslint-disable-next-line no-invalid-this

      assert.deepEqual(this.hello, 'there');
      done();
    }, {
      factoryArgs: ['foo', 'bar'],
      factoryContext: {
        hello: 'there'
      }
    });
    injecture.create('class_c');
  });
  it('will map instances by key field', done => {
    class ClassD {
      constructor(name) {
        this.name = name;
      }

    }

    injecture.register('class_d', function (name) {
      return new ClassD(name);
    }, {
      mapInstances: true,
      instanceIndexField: 'name'
    });
    const instance1 = injecture.create('class_d', 'ryan');
    const instance2 = injecture.create('class_d', 'stevens');
    const instances = injecture.allInstances('class_d');
    assert.equal(instance1, instances[0]);
    assert.equal(instance2, instances[1]);
    assert.equal(instances.length, 2);
    done();
  });
});
//# sourceMappingURL=injecture-test.js.map