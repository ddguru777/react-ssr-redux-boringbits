const Emitter = require('eventemitter2').EventEmitter2;

const injectore_store = require('./injecture-store');

const register_defaults = {
  attributes: {},
  silent: false,
  singleton: false,
  map_instances: false,
  instance_index_field: null,
  factory_args: [],
  factory_context: {}
};

class Injecture {
  constructor() {
    const emitter = new Emitter({
      wildcard: true
    });

    for (var field in emitter) {
      this[field] = emitter[field];
    }
  }

  create(key, ...factory_args) {
    const {
      factory,
      options,
      instances
    } = injectore_store[key];
    if (!factory) return undefined;
    const args = Array.prototype.slice.call(arguments).length > 1 ? factory_args : options.factory_args;
    const instance = factory.apply(options.factory_context, args);

    if (options.map_instances) {
      // by default they key will just be an auto incrementing umber
      let index = Object.keys(instances).length;

      if (options.instance_index_field) {
        index = instance[options.instance_index_field];
      }

      instances[index] = instance;
    }

    return instance;
  }
  /**
   * This will wrap register 
   * by providing a default Class factory
   * 
   * @param {*} key 
   * @param {*} options 
   */


  registerClass(key, Klass, options = {
    attributes: {}
  }) {
    this.register(key, function classFactor() {
      return new Klass();
    }, options);
  }

  register(key, factory, options) {
    options = Object.assign({}, register_defaults, options);
    if (injectore_store[key]) throw new Error(`The factory ${key} is already registered`);
    injectore_store[key] = {
      factory,
      options,
      instances: {}
    };

    if (!options.silient) {
      this.emit(`register.${key}`, key, factory, options);
    }
  }

  allInstances(key) {
    if (!injectore_store[key]) return [];
    return Object.keys(injectore_store[key].instances).map(index => {
      return injectore_store[key].instances[index];
    });
  }

  allInstancesByType(type) {}

}

const injectureSingleton = new Injecture();
module.exports = injectureSingleton;
//# sourceMappingURL=index.js.map