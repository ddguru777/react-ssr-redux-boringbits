{"version":3,"sources":["../../../src/lib/decorators/router.js"],"names":["injecture","require","extenrnalEmitters","localEmitter","EventEmitter","wildcard","toExport","middleware","on","routerEvents","args","eventName","event","nameWithArgs","concat","forEach","emitter","emit","apply","classPrototypes","getShadowMetaData","proto","i","length","newProto","metadata","push","getMetaDataByClass","Klass","prototype","addToProps","val","oldmetadata","newMetadata","decorator","target","field","descriptor","endpoint","methods","get","handler","value","classMetadata","endpoints","path","post","entrypointDecorator","createEndpointDecorator","entrypoint","register","endpointFactor","map_instances","endpointMetaData","create","subscribeDecorators","decoratorName","method","newDecorator","objToEmit","module","exports"],"mappings":"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","sourcesContent":["\nimport merge from 'deepmerge';\nimport EventEmitter from 'eventemitter2';\n\nconst injecture = require('injecture');\n\nconst extenrnalEmitters = [];\nconst localEmitter = new EventEmitter({wildcard: true});\n\nconst toExport = {\n  middleware: {},\n};\n\n\n/**\n * We will use this DI container\n * to track all the classes instantiated\n * via a @endpoint decorator\n */\n\nlocalEmitter.on('decorator.router.*', function routerEvents(...args) {\n  // eslint-disable-next-line no-invalid-this\n  const eventName = this.event;\n  const nameWithArgs = [eventName].concat(args);\n\n  // TODO: future enhancement, ensure ALL events\n  // always emit for each external emitter.\n  // This way emitters will ALWAYS get every endpoint\n  // reguardless of when it was subscribed\n  extenrnalEmitters.forEach(emitter => {\n    emitter.emit.apply(emitter, nameWithArgs);\n  });\n});\n\n/**\n * This \"data structure\" is to\n * hold a map of all the class prototypes\n * so we can store a shawod copy of the\n * decorated functionns meta data.\n *\n * It is an array because the only way to do\n * lookups on the decorated classes is to\n * compare prototypes, which cannot be converted\n * to a string so nothing will ever be ordered.\n *\n * This okay because although decorators are\n * evaulated at runtime, there should NOT\n * be that many in the code base where this\n * becauses non-performant as the vast majoirty\n * of use cases do not create decorated\n * classes on the fly.\n */\nconst classPrototypes = [];\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * by desing, if there is no classs registered\n * then it will make a new metadata obj and push it\n * in the classPrototypes array\n * @param {*} proto\n */\nfunction getShadowMetaData(proto) {\n  for (let i=0; i<classPrototypes.length; i++) {\n    if (classPrototypes[i].proto === proto) return classPrototypes[i];\n  }\n\n  const newProto = {\n    proto,\n    metadata: {},\n  };\n  classPrototypes.push(newProto);\n  return newProto;\n}\n\ntoExport.getMetaDataByClass = function getMetaDataByClass(Klass) {\n  return getShadowMetaData(Klass.prototype);\n};\n\n// deep merge... what could go wrong\nfunction addToProps(proto, val) {\n  const oldmetadata = getShadowMetaData(proto).metadata;\n  const newMetadata = merge(oldmetadata, val);\n  getShadowMetaData(proto).metadata = newMetadata;\n  return newMetadata;\n}\n\n\ntoExport.middleware = function middleware(middleware) {\n  if (typeof middleware === 'string') middleware = [middleware];\n\n  return function decorator(target, field, descriptor) {\n    const endpoint = {};\n    endpoint[field] = {\n      methods: {\n        get: {\n          handler: descriptor.value,\n        },\n      },\n      middleware,\n    };\n    const classMetadata = addToProps(target, {\n      endpoints: endpoint,\n    });\n    localEmitter.emit('decorator.router.middleware', {\n      target,\n      middleware,\n      field,\n      descriptor,\n      classMetadata,\n    });\n    return descriptor;\n  };\n};\n\n\ntoExport.get = function get(path) {\n  // convert to array\n  return function decorator(target, field, descriptor) {\n    const endpoint = {};\n    endpoint[field] = {\n      methods: {\n        get: {\n          handler: descriptor.value,\n        },\n      },\n      path,\n    };\n    const classMetadata = addToProps(target, {\n      endpoints: endpoint,\n    });\n    localEmitter.emit('decorator.router.get', {\n      target,\n      path,\n      field,\n      descriptor,\n      classMetadata,\n    });\n    return descriptor;\n  };\n};\n\ntoExport.post = function post(path) {\n  // convert to array\n  return function decorator(target, field, descriptor) {\n    const endpoint = {};\n    endpoint[field] = {\n      methods: {\n        post: {\n          handler: descriptor.value,\n        },\n      },\n      path,\n    };\n    const classMetadata = addToProps(target, {\n      endpoints: endpoint,\n    });\n    localEmitter.emit('decorator.router.post', {\n      target,\n      path,\n      field,\n      descriptor,\n      classMetadata,\n    });\n    return descriptor;\n  };\n};\n\nconst entrypointDecorator = createEndpointDecorator('entrypoint', 'get');\ntoExport.entrypoint = entrypointDecorator;\n\ninjecture.register('decorator.router.endpoint',\n    // since we are only using the container\n    // to collect all the instances we give it a\n    // dummy factory\n    function endpointFactor(Klass) {\n      return Klass;\n    }, {\n      map_instances: true,\n    }\n);\n\n\ntoExport.endpoint = function endpoint(path = '') {\n  return function(target) {\n    const endpointMetaData = {path};\n    const classMetadata = addToProps(target.prototype, endpointMetaData);\n\n    injecture.create('decorator.router.endpoint', target);\n    localEmitter.emit('decorator.router.endpoint', {\n      target,\n      path,\n      classMetadata,\n    });\n    return target;\n  };\n};\n\ntoExport.subscribeDecorators = function subscribeDecorators(emitter) {\n  extenrnalEmitters.push(emitter);\n};\n\nfunction createEndpointDecorator(decoratorName, method) {\n  return function newDecorator(...args) {\n    return function decorator(target, field, descriptor) {\n      const endpoint = {};\n      endpoint[field] = {\n        methods: {},\n      };\n      endpoint[field].methods[method] = {\n        handler: descriptor.value,\n      };\n      endpoint[field].methods[method][decoratorName] = args;\n\n      const classMetadata = addToProps(target, {\n        endpoints: endpoint,\n      });\n      const objToEmit = {\n        target,\n        field,\n        descriptor,\n        classMetadata,\n      };\n      objToEmit[decoratorName] = args;\n      localEmitter.emit('decorator.router.'+decoratorName, objToEmit);\n      return descriptor;\n    };\n  };\n}\n\ntoExport.createEndpointDecorator = createEndpointDecorator;\n\nmodule.exports = toExport;\n"],"file":"router.js"}