{"version":3,"sources":["../../../src/lib/decorators/router.js"],"names":["extenrnalEmitters","localEmitter","EventEmitter","wildcard","toExport","middleware","injecture","require","on","args","eventName","event","name_with_args","concat","forEach","emitter","emit","apply","class_prototypes","getShadowMetaData","proto","i","length","newProto","metadata","push","getMetaDataByClass","Klass","prototype","addToProps","val","oldmetadata","newMetadata","decorator","target","field","descriptor","endpoint","methods","get","handler","value","class_metadata","endpoints","path","post","entrypoint","js_file_path","register","endpointFactor","map_instances","endpoint_meta_data","create","subscribeDecorators","addMiddlewareDecorator","name","func","module","exports"],"mappings":";;AACA;;AACA;;;;AAEA,MAAMA,iBAAiB,GAAG,EAA1B;AACA,MAAMC,YAAY,GAAG,IAAIC,qBAAJ,CAAiB;AAACC,EAAAA,QAAQ,EAAE;AAAX,CAAjB,CAArB;AAEA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,UAAU,EAAE;AADG,CAAjB;AAKA;;;;;;AAKA,MAAMC,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AAEAN,YAAY,CAACO,EAAb,CAAgB,oBAAhB,EAAsC,UAAS,GAAGC,IAAZ,EAAkB;AACtD,QAAMC,SAAS,GAAG,KAAKC,KAAvB;AACA,QAAMC,cAAc,GAAG,CAACF,SAAD,EAAYG,MAAZ,CAAmBJ,IAAnB,CAAvB,CAFsD,CAItD;AACA;AACA;AACA;;AACAT,EAAAA,iBAAiB,CAACc,OAAlB,CAA0BC,OAAO,IAAI;AACnCA,IAAAA,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmBF,OAAnB,EAA4BH,cAA5B;AACD,GAFD;AAGD,CAXD;AAaA;;;;;;;;;;;;;;;;;;;AAkBA,MAAMM,gBAAgB,GAAG,EAAzB;AAEA;;;;;;;AAMA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC,OAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACH,gBAAgB,CAACI,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,QAAIH,gBAAgB,CAACG,CAAD,CAAhB,CAAoBD,KAApB,KAA8BA,KAAlC,EAAyC,OAAOF,gBAAgB,CAACG,CAAD,CAAvB;AAC1C;;AAED,QAAME,QAAQ,GAAG;AACfH,IAAAA,KADe;AAEfI,IAAAA,QAAQ,EAAE;AAFK,GAAjB;AAIAN,EAAAA,gBAAgB,CAACO,IAAjB,CAAsBF,QAAtB;AACA,SAAOA,QAAP;AAED;;AAEDnB,QAAQ,CAACsB,kBAAT,GAA8B,SAASA,kBAAT,CAA4BC,KAA5B,EAAmC;AAC/D,SAAOR,iBAAiB,CAACQ,KAAK,CAACC,SAAP,CAAxB;AACD,CAFD,C,CAIA;;;AACA,SAASC,UAAT,CAAoBT,KAApB,EAA2BU,GAA3B,EAA+B;AAC7B,QAAMC,WAAW,GAAGZ,iBAAiB,CAACC,KAAD,CAAjB,CAAyBI,QAA7C;AACA,QAAMQ,WAAW,GAAG,wBAAMD,WAAN,EAAmBD,GAAnB,CAApB;AACAX,EAAAA,iBAAiB,CAACC,KAAD,CAAjB,CAAyBI,QAAzB,GAAoCQ,WAApC;AACA,SAAOA,WAAP;AACD;;AAGD5B,QAAQ,CAACC,UAAT,GAAsB,SAASA,UAAT,CAAoBA,UAApB,EAAgC;AACpD,MAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoCA,UAAU,GAAG,CAACA,UAAD,CAAb;AAEpC,SAAO,SAAS4B,SAAT,CAAmBC,MAAnB,EAA2BC,KAA3B,EAAkCC,UAAlC,EAA8C;AAEnD,QAAIC,QAAQ,GAAG,EAAf;AACAA,IAAAA,QAAQ,CAACF,KAAD,CAAR,GAAkB;AAChBG,MAAAA,OAAO,EAAG;AACRC,QAAAA,GAAG,EAAE;AACHC,UAAAA,OAAO,EAAEJ,UAAU,CAACK;AADjB;AADG,OADM;AAMhBpC,MAAAA;AANgB,KAAlB;AAQA,UAAMqC,cAAc,GAAGb,UAAU,CAACK,MAAD,EAAS;AACxCS,MAAAA,SAAS,EAAEN;AAD6B,KAAT,CAAjC;AAGApC,IAAAA,YAAY,CAACe,IAAb,CAAkB,sBAAlB,EAA0C;AACxCkB,MAAAA,MADwC;AAExC7B,MAAAA,UAFwC;AAGxC8B,MAAAA,KAHwC;AAIxCC,MAAAA,UAJwC;AAKxCM,MAAAA;AALwC,KAA1C;AAOA,WAAON,UAAP;AACD,GAtBD;AAuBD,CA1BD;;AA6BAhC,QAAQ,CAACmC,GAAT,GAAe,SAASA,GAAT,CAAaK,IAAb,EAAmB;AAChC;AACA,SAAO,SAASX,SAAT,CAAmBC,MAAnB,EAA2BC,KAA3B,EAAkCC,UAAlC,EAA8C;AAEnD,QAAIC,QAAQ,GAAG,EAAf;AACAA,IAAAA,QAAQ,CAACF,KAAD,CAAR,GAAkB;AAChBG,MAAAA,OAAO,EAAG;AACRC,QAAAA,GAAG,EAAE;AACHC,UAAAA,OAAO,EAAEJ,UAAU,CAACK;AADjB;AADG,OADM;AAMhBG,MAAAA;AANgB,KAAlB;AAQA,UAAMF,cAAc,GAAGb,UAAU,CAACK,MAAD,EAAS;AACxCS,MAAAA,SAAS,EAAEN;AAD6B,KAAT,CAAjC;AAGApC,IAAAA,YAAY,CAACe,IAAb,CAAkB,sBAAlB,EAA0C;AACxCkB,MAAAA,MADwC;AAExCU,MAAAA,IAFwC;AAGxCT,MAAAA,KAHwC;AAIxCC,MAAAA,UAJwC;AAKxCM,MAAAA;AALwC,KAA1C;AAOA,WAAON,UAAP;AACD,GAtBD;AAuBD,CAzBD;;AA2BAhC,QAAQ,CAACyC,IAAT,GAAgB,SAASA,IAAT,CAAcD,IAAd,EAAoB;AAClC;AACA,SAAO,SAASX,SAAT,CAAmBC,MAAnB,EAA2BC,KAA3B,EAAkCC,UAAlC,EAA8C;AACnD,QAAIC,QAAQ,GAAG,EAAf;AACAA,IAAAA,QAAQ,CAACF,KAAD,CAAR,GAAkB;AAChBG,MAAAA,OAAO,EAAG;AACRO,QAAAA,IAAI,EAAE;AACJL,UAAAA,OAAO,EAAEJ,UAAU,CAACK;AADhB;AADE,OADM;AAMhBG,MAAAA;AANgB,KAAlB;AAQA,UAAMF,cAAc,GAAGb,UAAU,CAACK,MAAD,EAAS;AACxCS,MAAAA,SAAS,EAAEN;AAD6B,KAAT,CAAjC;AAGApC,IAAAA,YAAY,CAACe,IAAb,CAAkB,uBAAlB,EAA2C;AACzCkB,MAAAA,MADyC;AAEzCU,MAAAA,IAFyC;AAGzCT,MAAAA,KAHyC;AAIzCC,MAAAA,UAJyC;AAKzCM,MAAAA;AALyC,KAA3C;AAOA,WAAON,UAAP;AACD,GArBD;AAsBD,CAxBD;AA0BA;;;;;;AAIAhC,QAAQ,CAAC0C,UAAT,GAAsB,SAASA,UAAT,CAAoBC,YAApB,EAAkC;AACtD,SAAO,SAASd,SAAT,CAAmBC,MAAnB,EAA2BC,KAA3B,EAAkCC,UAAlC,EAA8C;AACnD,QAAIC,QAAQ,GAAG,EAAf;AACAA,IAAAA,QAAQ,CAACF,KAAD,CAAR,GAAkB;AAChBG,MAAAA,OAAO,EAAG;AACRC,QAAAA,GAAG,EAAE;AACHO,UAAAA,UAAU,EAAEC,YADT;AAEHP,UAAAA,OAAO,EAAEJ,UAAU,CAACK;AAFjB;AADG;AADM,KAAlB;AAQA,UAAMC,cAAc,GAAGb,UAAU,CAACK,MAAD,EAAS;AACxCS,MAAAA,SAAS,EAAEN;AAD6B,KAAT,CAAjC;AAGApC,IAAAA,YAAY,CAACe,IAAb,CAAkB,6BAAlB,EAAiD;AAC/CkB,MAAAA,MAD+C;AAE/CY,MAAAA,UAF+C;AAG/CX,MAAAA,KAH+C;AAI/CC,MAAAA,UAJ+C;AAK/CM,MAAAA;AAL+C,KAAjD;AAOA,WAAON,UAAP;AACD,GArBD;AAsBD,CAvBD;;AA0BA9B,SAAS,CAAC0C,QAAV,CAAmB,2BAAnB,EACE;AACA;AACA;AACA,SAASC,cAAT,CAAwBtB,KAAxB,EAA+B;AAC7B,SAAOA,KAAP;AACD,CANH,EAMK;AACDuB,EAAAA,aAAa,EAAE;AADd,CANL;;AAYA9C,QAAQ,CAACiC,QAAT,GAAoB,SAASA,QAAT,CAAkBO,IAAI,GAAG,EAAzB,EAA6B;AAC/C,SAAO,UAAUV,MAAV,EAAkB;AACvB,UAAMiB,kBAAkB,GAAG;AAAEP,MAAAA;AAAF,KAA3B;AACA,UAAMF,cAAc,GAAGb,UAAU,CAACK,MAAM,CAACN,SAAR,EAAmBuB,kBAAnB,CAAjC;AAEA7C,IAAAA,SAAS,CAAC8C,MAAV,CAAiB,2BAAjB,EAA8ClB,MAA9C;AACAjC,IAAAA,YAAY,CAACe,IAAb,CAAkB,2BAAlB,EAA+C;AAC7CkB,MAAAA,MAD6C;AAE7CU,MAAAA,IAF6C;AAG7CF,MAAAA;AAH6C,KAA/C;AAKA,WAAOR,MAAP;AACD,GAXD;AAYD,CAbD;;AAeA9B,QAAQ,CAACiD,mBAAT,GAA+B,SAASA,mBAAT,CAA6BtC,OAA7B,EAAsC;AACnEf,EAAAA,iBAAiB,CAACyB,IAAlB,CAAuBV,OAAvB;AACD,CAFD;;AAIAX,QAAQ,CAACkD,sBAAT,GAAkC,SAASA,sBAAT,CAAgCC,IAAhC,EAAsCC,IAAtC,EAA4C;AAC5EpD,EAAAA,QAAQ,CAACC,UAAT,CAAoBkD,IAApB,IAA4BC,IAA5B;AACD,CAFD;;AAKAC,MAAM,CAACC,OAAP,GAAiBtD,QAAjB","sourcesContent":["\nimport merge from 'deepmerge'\nimport EventEmitter from 'eventemitter2'\n\nconst extenrnalEmitters = [];\nconst localEmitter = new EventEmitter({wildcard: true});\n\nconst toExport = {\n  middleware: {}\n};\n\n\n/**\n * We will use this DI container\n * to track all the classes instantiated\n * via a @endpoint decorator\n */\nconst injecture = require('injecture');\n\nlocalEmitter.on('decorator.router.*', function(...args) {\n  const eventName = this.event;\n  const name_with_args = [eventName].concat(args);\n\n  // TODO: future enhancement, ensure ALL events\n  // always emit for each external emitter.\n  // This way emitters will ALWAYS get every endpoint\n  // reguardless of when it was subscribed\n  extenrnalEmitters.forEach(emitter => {\n    emitter.emit.apply(emitter, name_with_args)\n  });\n});\n\n/***\n * This \"data structure\" is to \n * hold a map of all the class prototypes\n * so we can store a shawod copy of the \n * decorated functionns meta data.\n * \n * It is an array because the only way to do \n * lookups on the decorated classes is to \n * compare prototypes, which cannot be converted\n * to a string so nothing will ever be ordered.\n * \n * This okay because although decorators are \n * evaulated at runtime, there should NOT \n * be that many in the code base where this \n * becauses non-performant as the vast majoirty \n * of use cases do not create decorated \n * classes on the fly.  \n */\nconst class_prototypes = [];\n\n/**\n * by desing, if there is no classs registered \n * then it will make a new metadata obj and push it \n * in the class_prototypes array\n * @param {*} proto \n */\nfunction getShadowMetaData(proto) {\n  for (let i=0; i<class_prototypes.length; i++) {\n    if (class_prototypes[i].proto === proto) return class_prototypes[i]\n  }\n\n  const newProto = {\n    proto,\n    metadata: {}\n  };\n  class_prototypes.push(newProto);\n  return newProto;\n\n}\n\ntoExport.getMetaDataByClass = function getMetaDataByClass(Klass) {\n  return getShadowMetaData(Klass.prototype);\n}\n\n// deep merge... what could go wrong\nfunction addToProps(proto, val){\n  const oldmetadata = getShadowMetaData(proto).metadata\n  const newMetadata = merge(oldmetadata, val);\n  getShadowMetaData(proto).metadata = newMetadata;\n  return newMetadata;\n}\n\n\ntoExport.middleware = function middleware(middleware) {\n  if (typeof middleware === 'string') middleware = [middleware];\n\n  return function decorator(target, field, descriptor) {\n\n    let endpoint = {}\n    endpoint[field] = {\n      methods : {\n        get: {\n          handler: descriptor.value\n        }\n      },\n      middleware\n    }\n    const class_metadata = addToProps(target, {\n      endpoints: endpoint\n    });\n    localEmitter.emit('decorator.router.get', {\n      target,\n      middleware,\n      field,\n      descriptor,\n      class_metadata\n    });\n    return descriptor;\n  }\n}   \n\n\ntoExport.get = function get(path) {\n  //convert to array\n  return function decorator(target, field, descriptor) {\n\n    let endpoint = {}\n    endpoint[field] = {\n      methods : {\n        get: {\n          handler: descriptor.value\n        }\n      },\n      path\n    }\n    const class_metadata = addToProps(target, {\n      endpoints: endpoint\n    });\n    localEmitter.emit('decorator.router.get', {\n      target,\n      path,\n      field,\n      descriptor,\n      class_metadata\n    });\n    return descriptor;\n  }\n}   \n\ntoExport.post = function post(path) {\n  //convert to array\n  return function decorator(target, field, descriptor) {\n    let endpoint = {}\n    endpoint[field] = {\n      methods : {\n        post: {\n          handler: descriptor.value\n        }\n      },\n      path\n    }\n    const class_metadata = addToProps(target, {\n      endpoints: endpoint\n    });\n    localEmitter.emit('decorator.router.post', {\n      target,\n      path,\n      field,\n      descriptor,\n      class_metadata\n    });\n    return descriptor;\n  }\n}   \n\n/**\n * \n * @param {absolute path from root} entrypoint\n */\ntoExport.entrypoint = function entrypoint(js_file_path) {\n  return function decorator(target, field, descriptor) {\n    let endpoint = {}\n    endpoint[field] = {\n      methods : {\n        get: {\n          entrypoint: js_file_path,\n          handler: descriptor.value\n        }\n      }\n    }\n    const class_metadata = addToProps(target, {\n      endpoints: endpoint\n    });\n    localEmitter.emit('decorator.router.entrypoint', {\n      target,\n      entrypoint,\n      field,\n      descriptor,\n      class_metadata\n    });\n    return descriptor;\n  }\n}\n\n\ninjecture.register('decorator.router.endpoint', \n  // since we are only using the container\n  // to collect all the instances we give it a\n  // dummy factory\n  function endpointFactor(Klass) {\n    return Klass\n  }, { \n    map_instances: true\n  }\n);\n\n\ntoExport.endpoint = function endpoint(path = '') {\n  return function (target) {\n    const endpoint_meta_data = { path }\n    const class_metadata = addToProps(target.prototype, endpoint_meta_data);\n\n    injecture.create('decorator.router.endpoint', target);\n    localEmitter.emit('decorator.router.endpoint', {\n      target,\n      path,\n      class_metadata\n    });\n    return target;\n  }\n}\n\ntoExport.subscribeDecorators = function subscribeDecorators(emitter) {\n  extenrnalEmitters.push(emitter);\n}\n\ntoExport.addMiddlewareDecorator = function addMiddlewareDecorator(name, func) {\n  toExport.middleware[name] = func;\n}\n\n\nmodule.exports = toExport;"],"file":"router.js"}