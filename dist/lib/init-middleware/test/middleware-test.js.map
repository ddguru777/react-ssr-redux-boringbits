{"version":3,"sources":["../../../../src/lib/init-middleware/test/middleware-test.js"],"names":["assert","require","proxyquire","noop","getMiddlewareFromModule","path","boring","then","result","Promise","resolve","describe","it","init","server_middleware","__dirname","boring_middleware","middlewareReturned","equal","Object","keys","length","ok","middlewareB","midA","foo","directRequiredMiddlewareFromA","directRequiredMiddlewareFromB","directRequiredMiddlewareFromC","middleware","func"],"mappings":";;;;;;AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,IAAI,GAAG,YAAW,CAAE,CAA1B;;AAEA,SAASC,uBAAT,CAAiCC,IAAjC,EAAuC;AACrC,SAAOJ,OAAO,CAACI,IAAD,CAAP,CAAc;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAAd,EAA6BC,IAA7B,CAAkCC,MAAM,IAAIC,OAAO,CAACC,OAAR,CAAgBF,MAAhB,CAA5C,CAAP;AACD;;AAEDG,QAAQ,CAAC,iBAAD,EAAoB,YAAW;AAErCC,EAAAA,EAAE,CAAC,oDAAD;AAAA;AAAA,oBAAuD,aAAY;AACnE,UAAMC,IAAI,GAAGX,UAAU,CAAC,UAAD,EAAa;AAClC,eAAS;AACPY,QAAAA,iBAAiB,EAAEC,SAAS,GAAG,kBADxB;AAEPC,QAAAA,iBAAiB,EAAED,SAAS,GAAG;AAFxB;AADyB,KAAb,CAAvB;AAOA,UAAME,kBAAkB,SAASJ,IAAI,CAAC;AAAEP,MAAAA,MAAM,EAAE;AAAV,KAAD,CAArC;AAEAN,IAAAA,MAAM,CAACkB,KAAP,CAAaC,MAAM,CAACC,IAAP,CAAYH,kBAAZ,EAAgCI,MAA7C,EAAqD,CAArD;AACArB,IAAAA,MAAM,CAACsB,EAAP,CAAUL,kBAAkB,CAACM,WAA7B,EAA0C,+DAA1C;AACAvB,IAAAA,MAAM,CAACsB,EAAP,CAAUL,kBAAkB,CAACO,IAA7B,EAAmC,+EAAnC;AACAxB,IAAAA,MAAM,CAACsB,EAAP,CAAUL,kBAAkB,CAACQ,GAA7B,EAAkC,kFAAlC;AAEA,UAAMC,6BAA6B,SAAStB,uBAAuB,CAAC,+BAAD,CAAnE;AACA,UAAMuB,6BAA6B,SAASvB,uBAAuB,CAAC,+BAAD,CAAnE;AACA,UAAMwB,6BAA6B,SAASxB,uBAAuB,CAAC,gCAAD,CAAnE;AAEAJ,IAAAA,MAAM,CAACkB,KAAP,CAAaD,kBAAkB,CAACO,IAAhC,EAAsCE,6BAA6B,CAACG,UAApE;AACA7B,IAAAA,MAAM,CAACkB,KAAP,CAAaD,kBAAkB,CAACM,WAAhC,EAA6CI,6BAA7C;AACA3B,IAAAA,MAAM,CAACkB,KAAP,CAAaD,kBAAkB,CAACQ,GAAhC,EAAqCG,6BAA6B,CAACE,IAAnE;AACD,GAtBC,EAAF;AAuBD,CAzBO,CAAR","sourcesContent":["const assert = require('assert');\nconst proxyquire = require('proxyquire');\nconst noop = function() {}\n\nfunction getMiddlewareFromModule(path) {\n  return require(path)({ boring: {}}).then(result => Promise.resolve(result));\n}\n\ndescribe('Init Middleware', function() {\n\n  it('will require all the middleware files in directory', async () => {\n    const init = proxyquire('../index', {\n      'paths': {\n        server_middleware: __dirname + '/test-middleware',\n        boring_middleware: __dirname + '/test-middleware2'\n      }\n    })\n\n    const middlewareReturned = await init({ boring: {}});\n\n    assert.equal(Object.keys(middlewareReturned).length, 3);\n    assert.ok(middlewareReturned.middlewareB, 'This one exported a function so we took the module as the key');\n    assert.ok(middlewareReturned.midA, 'there should be a midA object because it exported an object with a name field');\n    assert.ok(middlewareReturned.foo, 'This proves you can export an object with func as a key (rather than middleware)');\n\n    const directRequiredMiddlewareFromA = await getMiddlewareFromModule('./test-middleware/middlewareA');\n    const directRequiredMiddlewareFromB = await getMiddlewareFromModule('./test-middleware/middlewareB');\n    const directRequiredMiddlewareFromC = await getMiddlewareFromModule('./test-middleware2/middlewareC');\n\n    assert.equal(middlewareReturned.midA, directRequiredMiddlewareFromA.middleware);\n    assert.equal(middlewareReturned.middlewareB, directRequiredMiddlewareFromB);\n    assert.equal(middlewareReturned.foo, directRequiredMiddlewareFromC.func);\n  });\n});"],"file":"middleware-test.js"}