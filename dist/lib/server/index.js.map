{"version":3,"sources":["../../../src/lib/server/index.js"],"names":["config","require","logger","paths","util","InitPipeline","startExpress","app","port","listen","promisify","BoringServer","constructor","start","options","webpack_config_path","get","boring_webpack_dev_config","boring_webpack_prod_config","injections","build","Object","assign","webpack_config","process","env","PORT","perform","info","module","exports"],"mappings":";;;;;;AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,eAAD,CAAtB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,eAAD,CAAtB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMI,YAAY,GAAGJ,OAAO,CAAC,kBAAD,CAA5B;;SAEeK,Y;;;;;oCAAf,WAA4BC,GAA5B,EAAiCC,IAAjC,EAAuC;AACrCD,IAAAA,GAAG,CAACE,MAAJ,GAAaL,IAAI,CAACM,SAAL,CAAeH,GAAG,CAACE,MAAnB,CAAb;AACA,WAAOF,GAAG,CAACE,MAAJ,CAAWD,IAAX,CAAP;AACD,G;;;;AAED,MAAMG,YAAN,SAA2BN,YAA3B,CAAwC;AACtCO,EAAAA,WAAW,GAAG;AACZ;AACD;;AAEKC,EAAAA,KAAN,CAAYC,OAAZ,EAAqB;AAAA;;AAAA;AAEnB,YAAMC,mBAAmB,GAAGf,MAAM,CAACgB,GAAP,CAAW,sBAAX,EAAmC,IAAnC,IAC1Bb,KAAK,CAACc,yBADoB,GACQd,KAAK,CAACe,0BAD1C;AAGA,YAAMC,UAAU,SAAS,KAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB;AACpDC,QAAAA,cAAc,EAAEtB,OAAO,CAACc,mBAAD;AAD6B,OAAlB,EAEjCD,OAFiC,CAAX,CAAzB;AAIA,YAAMN,IAAI,GAAGgB,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB1B,MAAM,CAACgB,GAAP,CAAW,iBAAX,CAAjC;AACAG,MAAAA,UAAU,CAACX,IAAX,GAAkBA,IAAlB;AAEA,mBAAa,KAAI,CAACmB,OAAL,CAAa,QAAb,EAAuBR,UAAvB;AAAA;AAAA,wBAAmC,aAAW;AACzD,cAAMb,YAAY,CAAC,KAAI,CAACC,GAAN,EAAWC,IAAX,CAAlB;AACAN,QAAAA,MAAM,CAAC0B,IAAP,CAAY,uBAAuBpB,IAAnC;AAEA,eAAOW,UAAP;AACD,OALY,EAAb;AAZmB;AAmBpB;;AAxBqC;;AA2BxCU,MAAM,CAACC,OAAP,GAAiBnB,YAAjB","sourcesContent":["const config = require('boring-config');\nconst logger = require('boring-logger');\nconst paths = require('paths');\nconst util = require('util');\nconst InitPipeline = require('../init-pipeline');\n\nasync function startExpress(app, port) {\n  app.listen = util.promisify(app.listen);\n  return app.listen(port);\n}\n\nclass BoringServer extends InitPipeline {\n  constructor() {\n    super();\n  }\n\n  async start(options) {\n\n    const webpack_config_path = config.get('boring.isDevelopment', true) ?\n      paths.boring_webpack_dev_config : paths.boring_webpack_prod_config;\n\n    const injections = await this.build(Object.assign({}, {\n      webpack_config: require(webpack_config_path)\n    }, options));\n\n    const port = process.env.PORT || config.get('boring.app.port');\n    injections.port = port;\n\n    return await this.perform('listen', injections, async() => {\n      await startExpress(this.app, port);\n      logger.info('Listening on port ' + port);\n\n      return injections;\n    })\n\n  }\n}\n\nmodule.exports = BoringServer"],"file":"index.js"}