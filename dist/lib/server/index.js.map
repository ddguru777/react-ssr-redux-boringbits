{"version":3,"sources":["../../../src/lib/server/index.js"],"names":["config","require","logger","paths","util","InitPipeline","startExpress","app","port","listen","promisify","BoringServer","constructor","start","options","webpack_config_path","get","boring_webpack_dev_config","boring_webpack_prod_config","injections","build","Object","assign","webpack_config","process","env","PORT","perform","info","module","exports"],"mappings":";;AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,eAAD,CAAtB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,eAAD,CAAtB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMI,YAAY,GAAGJ,OAAO,CAAC,kBAAD,CAA5B;;AAEA,eAAeK,YAAf,CAA4BC,GAA5B,EAAiCC,IAAjC,EAAuC;AACrCD,EAAAA,GAAG,CAACE,MAAJ,GAAaL,IAAI,CAACM,SAAL,CAAeH,GAAG,CAACE,MAAnB,CAAb;AACA,SAAOF,GAAG,CAACE,MAAJ,CAAWD,IAAX,CAAP;AACD;;AAED,MAAMG,YAAN,SAA2BN,YAA3B,CAAwC;AACtCO,EAAAA,WAAW,GAAG;AACZ;AACD;;AAED,QAAMC,KAAN,CAAYC,OAAZ,EAAqB;AAEnB,UAAMC,mBAAmB,GAAGf,MAAM,CAACgB,GAAP,CAAW,sBAAX,EAAmC,IAAnC,IAC1Bb,KAAK,CAACc,yBADoB,GACQd,KAAK,CAACe,0BAD1C;AAGA,UAAMC,UAAU,GAAG,MAAM,KAAKC,KAAL,CAAWC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB;AACpDC,MAAAA,cAAc,EAAEtB,OAAO,CAACc,mBAAD;AAD6B,KAAlB,EAEjCD,OAFiC,CAAX,CAAzB;AAIA,UAAMN,IAAI,GAAGgB,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB1B,MAAM,CAACgB,GAAP,CAAW,iBAAX,CAAjC;AACAG,IAAAA,UAAU,CAACX,IAAX,GAAkBA,IAAlB;AAEA,WAAO,MAAM,KAAKmB,OAAL,CAAa,QAAb,EAAuBR,UAAvB,EAAmC,YAAW;AACzD,YAAMb,YAAY,CAAC,KAAKC,GAAN,EAAWC,IAAX,CAAlB;AACAN,MAAAA,MAAM,CAAC0B,IAAP,CAAY,uBAAuBpB,IAAnC;AAEA,aAAOW,UAAP;AACD,KALY,CAAb;AAOD;;AAxBqC;;AA2BxCU,MAAM,CAACC,OAAP,GAAiBnB,YAAjB","sourcesContent":["const config = require('boring-config');\nconst logger = require('boring-logger');\nconst paths = require('paths');\nconst util = require('util');\nconst InitPipeline = require('../init-pipeline');\n\nasync function startExpress(app, port) {\n  app.listen = util.promisify(app.listen);\n  return app.listen(port);\n}\n\nclass BoringServer extends InitPipeline {\n  constructor() {\n    super();\n  }\n\n  async start(options) {\n\n    const webpack_config_path = config.get('boring.isDevelopment', true) ?\n      paths.boring_webpack_dev_config : paths.boring_webpack_prod_config;\n\n    const injections = await this.build(Object.assign({}, {\n      webpack_config: require(webpack_config_path)\n    }, options));\n\n    const port = process.env.PORT || config.get('boring.app.port');\n    injections.port = port;\n\n    return await this.perform('listen', injections, async() => {\n      await startExpress(this.app, port);\n      logger.info('Listening on port ' + port);\n\n      return injections;\n    })\n\n  }\n}\n\nmodule.exports = BoringServer"],"file":"index.js"}