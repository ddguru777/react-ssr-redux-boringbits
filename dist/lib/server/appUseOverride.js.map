{"version":3,"sources":["../../../src/lib/server/appUseOverride.js"],"names":["logger","require","module","exports","app","perform","oldUse","use","bind","wrappedUse","name","middleware","ctx","deferMiddleware","Promise","resolve","reject","info","catch","middlewarePromise","queuing","proxyMiddleware","req","res","next","url","then","deferedMiddleware","e"],"mappings":";;;;;;AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,eAAD,CAAtB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAASC,GAAT,EAAcC,OAAd,EAAuB;AACtC,QAAMC,MAAM,GAAGF,GAAG,CAACG,GAAJ,CAAQC,IAAR,CAAaJ,GAAb,CAAf;AACA,SAAO,SAASK,UAAT,CAAoBC,IAApB,EAA0BC,UAA1B,EAAsC;AAE3C,QAAI,OAAOD,IAAP,KAAgB,UAApB,EAAgC;AAC9BC,MAAAA,UAAU,GAAGD,IAAb;AACAA,MAAAA,IAAI,GAAGC,UAAU,CAACD,IAAlB,CAF8B,CAEN;AACzB;;AAED,QAAIE,GAAG,GAAG;AACRD,MAAAA,UADQ;AAERD,MAAAA;AAFQ,KAAV;AAKAJ,IAAAA,MAAM,CAACO,eAAe,CAACH,IAAD,EAAO,IAAII,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAEjEhB,MAAAA,MAAM,CAACiB,IAAP,CAAY,8BAA8BL,GAAG,CAACF,IAA9C;AACAL,MAAAA,OAAO,CAAC,SAAD,EAAYO,GAAZ;AAAA;AAAA,wBAAiB,aAAiB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAG,QAAAA,OAAO,CAACH,GAAG,CAACD,UAAL,CAAP;AACA,eAAOC,GAAP;AACD,OAXM,EAAP,CAWGM,KAXH,CAWSF,MAXT;AAaD,KAhB4B,CAAP,CAAhB,CAAN;AAkBA,GA9BF;AAgCD,CAlCD;;AAoCA,SAASH,eAAT,CAAyBH,IAAzB,EAA+BS,iBAA/B,EAAkD;AAEhD,MAAIC,OAAO,GAAG,IAAd;AACA,SAAO,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AAC9C,QAAIJ,OAAJ,EAAapB,MAAM,CAACiB,IAAP,CAAa,gDAA+CP,IAAK,cAAaY,GAAG,CAACG,GAAI,EAAtF;AACbN,IAAAA,iBAAiB,CAACO,IAAlB,CAAuBC,iBAAiB,IAAI;AAC1CP,MAAAA,OAAO,GAAG,KAAV;AACAO,MAAAA,iBAAiB,CAACL,GAAD,EAAMC,GAAN,EAAWC,IAAX,CAAjB;AACD,KAHD,EAGGN,KAHH,CAGUU,CAAD,IAAO;AACd,YAAMA,CAAN;AACD,KALD;AAMD,GARD;AASD","sourcesContent":["const logger = require('boring-logger');\n\nmodule.exports = function(app, perform) {\n  const oldUse = app.use.bind(app);\n  return function wrappedUse(name, middleware) {\n\n    if (typeof name === 'function') {\n      middleware = name;\n      name = middleware.name; // just use the name of the function\n    }\n\n    let ctx = {\n      middleware,\n      name,\n    }\n\n    oldUse(deferMiddleware(name, new Promise(function(resolve, reject) {\n\n      logger.info('Registering middielware::' + ctx.name);\n      perform('app.use', ctx, async function() {\n        // This in a way acts a dependency\n        // system where a hook can only\n        // effectively call app.use AFTER or\n        // before a dependency.\n        //\n        // In theory this has the danger of\n        // creating a cycle.  Maybe in the\n        // future we can avoid that\n        resolve(ctx.middleware);\n        return ctx;\n      }).catch(reject);\n\n    })))\n\n   };\n\n}\n\nfunction deferMiddleware(name, middlewarePromise) {\n\n  let queuing = true;\n  return function proxyMiddleware(req, res, next) {\n    if (queuing) logger.info(`App use has not finished loading middleware {${name}}, queuing ${req.url}`);\n    middlewarePromise.then(deferedMiddleware => {\n      queuing = false;\n      deferedMiddleware(req, res, next);\n    }).catch((e) => {\n      throw e;\n    })\n  }\n}\n"],"file":"appUseOverride.js"}