{"version":3,"sources":["../../../../src/lib/server/test/server-test.js"],"names":["assert","require","proxyquire","logger","describe","timeout","Server","beforeEach","init","express","appToReturn","listen","port","fn","use","get","post","set","it","server","before","bootOptions","ok","webpack_config","mutateMe","final_config","start","boring","app"],"mappings":";;AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,eAAD,CAAtB;;AAEAG,QAAQ,CAAC,eAAD,EAAkB,YAAW;AAEnC,OAAKC,OAAL,CAAa,KAAb;AACA,MAAIC,MAAJ;AACAC,EAAAA,UAAU,CAAC,MAAM;AACf,UAAMC,IAAI,GAAGN,UAAU,CAAC,qBAAD,EAAwB;AAC7CO,MAAAA,OAAO,EAAE,SAASC,WAAT,GAAuB;AAC5B,eAAO;AACLC,UAAAA,MAAM,EAAG,CAACC,IAAD,EAAOC,EAAP,KAAcA,EAAE,EADpB;AAELC,UAAAA,GAAG,EAAE,YAAW,CAAE,CAFb;AAGLC,UAAAA,GAAG,EAAE,YAAW,CAAE,CAHb;AAILC,UAAAA,IAAI,EAAE,YAAW,CAAE,CAJd;AAKLC,UAAAA,GAAG,EAAE,YAAW,CAAE;AALb,SAAP;AAOD;AAT0C,KAAxB,CAAvB;AAaAX,IAAAA,MAAM,GAAGJ,UAAU,CAAC,UAAD,EAAa;AAC9B,0BAAoBM;AADU,KAAb,CAAnB;AAID,GAlBS,CAAV;AAoBAU,EAAAA,EAAE,CAAC,oCAAD,EAAuC,kBAAiB;AAExD,UAAMC,MAAM,GAAG,IAAIb,MAAJ,EAAf;AACAa,IAAAA,MAAM,CAACC,MAAP,CAAc,QAAd,EAAwB,gBAAeC,WAAf,EAA4B;AAClDrB,MAAAA,MAAM,CAACsB,EAAP,CAAUD,WAAW,CAACE,cAAtB,EAAsC,8CAAtC;AACAF,MAAAA,WAAW,CAACG,QAAZ,GAAuB,MAAvB;AACD,KAHD;AAKA,UAAMC,YAAY,GAAG,MAAMN,MAAM,CAACO,KAAP,EAA3B;AAEA1B,IAAAA,MAAM,CAACsB,EAAP,CAAUG,YAAY,CAACE,MAAb,CAAoBC,GAA9B,EAAmC,+BAAnC;AACA5B,IAAAA,MAAM,CAACsB,EAAP,CAAUG,YAAY,CAACD,QAAvB,EAAiC,MAAjC,EAAyC,yBAAzC;AACAxB,IAAAA,MAAM,CAACsB,EAAP,CAAUG,YAAY,CAACF,cAAvB,EAAuC,kCAAvC;AAED,GAdC,CAAF;AAgBD,CAxCO,CAAR","sourcesContent":["const assert = require('assert');\nconst proxyquire = require('proxyquire');\nconst logger = require('boring-logger');\n\ndescribe('Boring Server', function() {\n\n  this.timeout(20000);\n  let Server;\n  beforeEach(() => {\n    const init = proxyquire('../../init-pipeline', {\n      express: function appToReturn() {\n          return {\n            listen: ((port, fn) => fn()),\n            use: function() {},\n            get: function() {},\n            post: function() {},\n            set: function() {}\n          }\n        }\n      }\n    )\n\n    Server = proxyquire('../index', {\n      '../init-pipeline': init\n      }\n    )\n  })\n\n  it('start can take an options callback', async function() {\n\n    const server = new Server();\n    server.before('listen', async function(bootOptions) {\n      assert.ok(bootOptions.webpack_config, 'should have access to webpack in before hook');\n      bootOptions.mutateMe = 'ryan'\n    });\n\n    const final_config = await server.start();\n\n    assert.ok(final_config.boring.app, 'should have access to express');\n    assert.ok(final_config.mutateMe, 'ryan', 'before hook did not run');\n    assert.ok(final_config.webpack_config, 'There should be a webpack object');\n\n  });\n\n});"],"file":"server-test.js"}