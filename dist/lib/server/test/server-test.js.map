{"version":3,"sources":["../../../../src/lib/server/test/server-test.js"],"names":["assert","require","proxyquire","logger","describe","timeout","Server","beforeEach","init","express","appToReturn","listen","port","fn","use","get","post","it","server","before","bootOptions","ok","webpack_config","mutateMe","final_config","start","boring","app","console","log"],"mappings":";;;;;;AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,eAAD,CAAtB;;AAEAG,QAAQ,CAAC,eAAD,EAAkB,YAAW;AAEnC,OAAKC,OAAL,CAAa,KAAb;AACA,MAAIC,MAAJ;AACAC,EAAAA,UAAU,CAAC,MAAM;AACf,UAAMC,IAAI,GAAGN,UAAU,CAAC,qBAAD,EAAwB;AAC7CO,MAAAA,OAAO,EAAE,SAASC,WAAT,GAAuB;AAC5B,eAAO;AACLC,UAAAA,MAAM,EAAG,CAACC,IAAD,EAAOC,EAAP,KAAcA,EAAE,EADpB;AAELC,UAAAA,GAAG,EAAE,YAAW,CAAE,CAFb;AAGLC,UAAAA,GAAG,EAAE,YAAW,CAAE,CAHb;AAILC,UAAAA,IAAI,EAAE,YAAW,CAAE;AAJd,SAAP;AAMD;AAR0C,KAAxB,CAAvB;AAYAV,IAAAA,MAAM,GAAGJ,UAAU,CAAC,UAAD,EAAa;AAC9B,0BAAoBM;AADU,KAAb,CAAnB;AAID,GAjBS,CAAV;AAmBAS,EAAAA,EAAE,CAAC,oCAAD;AAAA;AAAA,oBAAuC,aAAiB;AAExD,UAAMC,MAAM,GAAG,IAAIZ,MAAJ,EAAf;AACAY,IAAAA,MAAM,CAACC,MAAP,CAAc,QAAd;AAAA;AAAA;AAAA,oCAAwB,WAAeC,WAAf,EAA4B;AAClDpB,QAAAA,MAAM,CAACqB,EAAP,CAAUD,WAAW,CAACE,cAAtB,EAAsC,8CAAtC;AACAF,QAAAA,WAAW,CAACG,QAAZ,GAAuB,MAAvB;AACD,OAHD;;AAAA;AAAA;AAAA;AAAA;AAKA,UAAMC,YAAY,SAASN,MAAM,CAACO,KAAP,EAA3B;AAEAzB,IAAAA,MAAM,CAACqB,EAAP,CAAUG,YAAY,CAACE,MAAb,CAAoBC,GAA9B,EAAmC,+BAAnC;AACA3B,IAAAA,MAAM,CAACqB,EAAP,CAAUG,YAAY,CAACD,QAAvB,EAAiC,MAAjC,EAAyC,yBAAzC;AACAvB,IAAAA,MAAM,CAACqB,EAAP,CAAUG,YAAY,CAACF,cAAvB,EAAuC,kCAAvC;AAEAM,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD,GAfC,EAAF;AAiBD,CAxCO,CAAR","sourcesContent":["const assert = require('assert');\r\nconst proxyquire = require('proxyquire');\r\nconst logger = require('boring-logger');\r\n\r\ndescribe('Boring Server', function() {\r\n\r\n  this.timeout(20000);\r\n  let Server;\r\n  beforeEach(() => {  \r\n    const init = proxyquire('../../init-pipeline', {\r\n      express: function appToReturn() {\r\n          return { \r\n            listen: ((port, fn) => fn()),\r\n            use: function() {},\r\n            get: function() {},\r\n            post: function() {}\r\n          }\r\n        }\r\n      }\r\n    )\r\n\r\n    Server = proxyquire('../index', {\r\n      '../init-pipeline': init\r\n      }\r\n    )\r\n  })\r\n\r\n  it('start can take an options callback', async function() {\r\n\r\n    const server = new Server();\r\n    server.before('listen', async function(bootOptions) {\r\n      assert.ok(bootOptions.webpack_config, 'should have access to webpack in before hook');\r\n      bootOptions.mutateMe = 'ryan'\r\n    });\r\n\r\n    const final_config = await server.start();\r\n\r\n    assert.ok(final_config.boring.app, 'should have access to express');\r\n    assert.ok(final_config.mutateMe, 'ryan', 'before hook did not run');\r\n    assert.ok(final_config.webpack_config, 'There should be a webpack object');\r\n\r\n    console.log(\"####\")\r\n  });\r\n\r\n});"],"file":"server-test.js"}