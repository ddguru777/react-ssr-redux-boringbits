{"version":3,"sources":["../../../src/lib/init-modules/index.js"],"names":["syncGlob","glob","module","exports","initModules","BoringInjections","boring","logger","results","Promise","all","paths","boring_app_dir","app_dir","map","path","cwd","then","files","file","uniqueArray","reduce","acc","arr","concat","item","indexOf","push","info","require"],"mappings":";;AACA;;AACA;;AAEA;;AACA;;;;AAEA,MAAMA,QAAQ,GAAG,qBAAUC,aAAV,CAAjB;AAGE;;;;;AAIFC,MAAM,CAACC,OAAP,GAAiB,eAAeC,WAAf,CAA2BC,gBAA3B,EAA6C;AAE5D,QAAM;AACJC,IAAAA,MADI;AAEJC,IAAAA;AAFI,MAGFF,gBAHJ;AAMA,QAAMG,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAY,CAACC,eAAMC,cAAP,EAAuBD,eAAME,OAA7B,EAAsCC,GAAtC,CAA0CC,IAAI,IAAI;AAClF,WAAOf,QAAQ,CAAC,4BAAD,EAA+B;AAAEgB,MAAAA,GAAG,EAAGD;AAAR,KAA/B,CAAR,CAAsDE,IAAtD,CAA2DC,KAAK,IAAI;AACzE,aAAOA,KAAK,CAACJ,GAAN,CAAUK,IAAI,IAAI;AACvB,eAAOJ,IAAI,GAAG,GAAP,GAAaI,IAApB;AACD,OAFM,CAAP;AAGD,KAJM,CAAP;AAKD,GANiC,CAAZ,CAAtB;AAQA,QAAMC,WAAW,GAAGZ,OAAO,CAACa,MAAR,CAAe,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/C;AACA,WAAOD,GAAG,CAACE,MAAJ,CAAWD,GAAX,CAAP;AACD,GAHmB,EAGjB,EAHiB,EAGbF,MAHa,CAGN,UAASC,GAAT,EAAcG,IAAd,EAAoB;AAChC;AACA,QAAIH,GAAG,CAACI,OAAJ,CAAYD,IAAZ,IAAkB,CAAtB,EAAyBH,GAAG,CAACK,IAAJ,CAASF,IAAT;AACzB,WAAOH,GAAP;AACD,GAPmB,EAOjB,EAPiB,CAApB;AAUA,SAAO,MAAMb,OAAO,CAACC,GAAR,CAAYU,WAAW,CAACN,GAAZ,CAAgBK,IAAI,IAAI;AAC/CZ,IAAAA,MAAM,CAACqB,IAAP,CAAY,iCAAiCT,IAA7C;AACA,WAAOU,OAAO,CAACV,IAAD,CAAP,CAAcd,gBAAd,CAAP;AACD,GAHwB,CAAZ,CAAb;AAKD,CA/BD","sourcesContent":["\nimport paths from 'paths'\nimport requireInject from 'require-inject-all'\n\nimport {promisify} from 'util';\nimport glob from 'glob';\n\nconst syncGlob = promisify(glob);\n\n\n  /**\n   * Hooks do not need to export anything, by default the\n   * name of the hook will be the module name\n   */\nmodule.exports = async function initModules(BoringInjections) {\n\n  const {\n    boring,\n    logger,\n  } = BoringInjections;\n\n  \n  const results = await Promise.all([paths.boring_app_dir, paths.app_dir].map(path => {\n    return syncGlob('**/managed_modules/**/*.js', { cwd : path}).then(files => {\n      return files.map(file => {\n        return path + '/' + file;\n      });\n    });\n  }));\n\n  const uniqueArray = results.reduce((acc, arr) => {\n    // combine arrays \n    return acc.concat(arr);\n  }, []).reduce(function(acc, item) {\n    // dedupe\n    if (acc.indexOf(item)<0) acc.push(item);\n    return acc;\n  }, []);\n  \n  \n  return await Promise.all(uniqueArray.map(file => {\n    logger.info('Registering managed module: ' + file);\n    return require(file)(BoringInjections);\n  }));\n\n}"],"file":"index.js"}