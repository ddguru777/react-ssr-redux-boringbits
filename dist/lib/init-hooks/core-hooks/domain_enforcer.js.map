{"version":3,"sources":["../../../../src/lib/init-hooks/core-hooks/domain_enforcer.js"],"names":["module","exports","domainEnforcer","BoringInjections","boring","subdomain","config","get","before","app","use","req","res","next","protocol","host","hostname","toLowerCase","redirect","url","needsSubdomain","split","length","target","Promise","resolve","name"],"mappings":";;AACAA,MAAM,CAACC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,gBAAxB,EAA0C;AAEzD,QAAM;AACJC,IAAAA;AADI,MAEFD,gBAFJ;AAIA,QAAME,SAAS,GAAGD,MAAM,CAACE,MAAP,CAAcC,GAAd,CAAkB,0BAAlB,EAA8C,KAA9C,CAAlB;;AAEA,MAAIF,SAAJ,EAAe;AACbD,IAAAA,MAAM,CAACI,MAAP,CAAc,aAAd,EAA6B,YAAW;AACtCJ,MAAAA,MAAM,CAACK,GAAP,CAAWC,GAAX,CAAe,YAAf,EAA6B,UAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAEpD;AACA;AACA;AACA,cAAMC,QAAQ,GAAGH,GAAG,CAACG,QAArB;AACA,cAAMC,IAAI,GAAG,CAACJ,GAAG,CAACK,QAAJ,IAAgB,EAAjB,EAAqBC,WAArB,EAAb;AACA,YAAIF,IAAI,KAAK,WAAb,EAA0B,OAAOH,GAAG,CAACM,QAAJ,CAAa,GAAb,EAAkB,gCAAgCP,GAAG,CAACQ,GAAtD,CAAP;AAC1B,cAAMC,cAAc,GAAGL,IAAI,CAACM,KAAL,CAAW,GAAX,EAAgBC,MAAhB,KAA2B,CAAlD;;AAEA,YAAIR,QAAQ,KAAK,MAAb,IAAuBM,cAA3B,EAA2C;AACzC,gBAAMG,MAAM,GAAG,cAAcH,cAAc,GAAGf,SAAS,GAAG,GAAf,GAAqB,EAAjD,IAAuDU,IAAvD,GAA8DJ,GAAG,CAACQ,GAAjF,CADyC,CAGzC;AACA;AACA;;AACA,iBAAOP,GAAG,CAACM,QAAJ,CAAa,GAAb,EAAkBK,MAAlB,CAAP;AACD;;AAEDV,QAAAA,IAAI;AACL,OApBD;AAsBA,aAAOW,OAAO,CAACC,OAAR,EAAP;AACD,KAxBD;AAyBD;;AAED,SAAO;AAACC,IAAAA,IAAI,EAAE;AAAP,GAAP;AACD,CArCD","sourcesContent":["\nmodule.exports = function domainEnforcer(BoringInjections) {\n\n  const {\n    boring,\n  } = BoringInjections;\n\n  const subdomain = boring.config.get('boring.default_subdomain', 'www');\n\n  if (subdomain) {\n    boring.before('add-routers', function() {\n      boring.app.use('redirector', function(req, res, next) {\n\n        // reading protocol and hostname assumes\n        // the proxy hook has ran to run the\n        // express LOC `boring.app.set('trust proxy', true);`\n        const protocol = req.protocol;\n        const host = (req.hostname || '').toLowerCase();\n        if (host === 'localhost') return res.redirect(302, 'https://www.boringlocal.com' + req.url);\n        const needsSubdomain = host.split('.').length === 2;\n\n        if (protocol === 'http' || needsSubdomain) {\n          const target = 'https://' + (needsSubdomain ? subdomain + '.' : '') + host + req.url;\n\n          // this should probs be a 301,\n          // but I don't like how agressive things\n          // cache 301's ( looking >__> at your chrome)\n          return res.redirect(302, target);\n        }\n\n        next();\n      });\n\n      return Promise.resolve();\n    });\n  }\n\n  return {name: 'domain_enforcer'};\n};\n"],"file":"domain_enforcer.js"}