{"version":3,"sources":["../../../../src/lib/init-hooks/core-hooks/domain_enforcer.js"],"names":["URL","require","module","exports","domain_enforcer","BoringInjections","boring","subdomain","config","get","before","app","use","req","res","next","protocol","host","hostname","toLowerCase","hasSubdomain","indexOf","target","url","redirect","Promise","resolve","name"],"mappings":";;AACA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,eAAT,CAAyBC,gBAAzB,EAA2C;AAE1D,QAAM;AACJC,IAAAA;AADI,MAEFD,gBAFJ;AAIA,QAAME,SAAS,GAAGD,MAAM,CAACE,MAAP,CAAcC,GAAd,CAAkB,0BAAlB,EAA8C,KAA9C,CAAlB;;AAEA,MAAIF,SAAJ,EAAe;AACbD,IAAAA,MAAM,CAACI,MAAP,CAAc,aAAd,EAA6B,YAAW;AACtCJ,MAAAA,MAAM,CAACK,GAAP,CAAWC,GAAX,CAAe,YAAf,EAA6B,UAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAEpD;AACA;AACA;AACA,cAAMC,QAAQ,GAAGH,GAAG,CAACG,QAArB;AACA,cAAMC,IAAI,GAAG,CAACJ,GAAG,CAACK,QAAJ,IAAgB,EAAjB,EAAqBC,WAArB,EAAb;AACA,cAAMC,YAAY,GAAIH,IAAI,CAACI,OAAL,CAAad,SAAb,MAA4B,CAAlD;;AAEA,YAAIS,QAAQ,KAAK,MAAb,IAAuB,CAACI,YAA5B,EAA0C;AACxC,gBAAME,MAAM,GAAG,cAAe,CAACF,YAAD,GAAgBb,SAAS,GAAG,GAA5B,GAAkC,EAAjD,IAAuDU,IAAvD,GAA8DJ,GAAG,CAACU,GAAjF,CADwC,CAGxC;AACA;AACA;;AACA,iBAAOT,GAAG,CAACU,QAAJ,CAAa,GAAb,EAAkBF,MAAlB,CAAP;AACD;;AAEDP,QAAAA,IAAI;AACL,OAnBD;AAqBA,aAAOU,OAAO,CAACC,OAAR,EAAP;AACD,KAvBD;AAwBD;;AAED,SAAO;AAACC,IAAAA,IAAI,EAAE;AAAP,GAAP;AACD,CApCD","sourcesContent":["\nconst URL = require('url');\n\nmodule.exports = function domain_enforcer(BoringInjections) {\n\n  const {\n    boring\n  } = BoringInjections;\n\n  const subdomain = boring.config.get('boring.default_subdomain', 'www');\n\n  if (subdomain) {\n    boring.before('add-routers', function() {\n      boring.app.use('redirector', function(req, res, next) {\n\n        // reading protocol and hostname assumes\n        // the proxy hook has ran to run the\n        // express LOC `boring.app.set('trust proxy', true);`\n        const protocol = req.protocol;\n        const host = (req.hostname || '').toLowerCase();\n        const hasSubdomain = (host.indexOf(subdomain) === 0);\n\n        if (protocol === 'http' || !hasSubdomain) {\n          const target = 'https://'  + (!hasSubdomain ? subdomain + '.' : '') + host + req.url;\n\n          // this should probs be a 301,\n          // but I don't like how agressive things\n          // cache 301's ( looking >__> at your chrome)\n          return res.redirect(302, target);\n        }\n\n        next();\n      });\n\n      return Promise.resolve();\n    });\n  }\n\n  return {name: 'domain_enforcer'}\n}"],"file":"domain_enforcer.js"}