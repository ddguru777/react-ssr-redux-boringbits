var assert = require('assert');


describe('Require Inject All', function() {
  it('will resolve with empty array if the directory does not exist', async function() {
    assert.equal(1, 1)
    const inject = require('../');

    var results = await inject('wefoij23/sadflifj')
    assert.deepEqual(results, [], 'Should be empty');
    
  });

  it('should find two modules, one a folder one a file', async function() {
    
    const inject = require('../index');
    const objectToPass = { testKey: 'bark' };
    var results = await inject(process.cwd() + '/src/node_modules/require-inject-all/test/test-modules', objectToPass)

    assert.equal(Object.keys(results).length, 2, 'There should be two endpoints found')
    assert.ok(Object.keys(results).indexOf('modA_in_folder')>=0)
    assert.ok(Object.keys(results).indexOf('modB_file_module')>=0)

    assert.equal(objectToPass.testKey, 'bark', 'The test key should not be modified');
    assert.equal(objectToPass.modAInfo, 'hello', 'Module A should have put a prop modAInfo on the object');
    assert.equal(objectToPass.modBInfo, 'meow', 'Module B should have put a prop modBInfo on the object');

  });

  it('should throw if a module throws', async function() {
    const inject = require('../index');
    let error;

    try {
      var results = await inject(process.cwd() + '/src/node_modules/require-inject-all/test/junk-folder')
      assert.fail('Should not reach here');
    }
    catch (e) {
      error = e;
    }
    assert.equal(error.message, 'Derp', 'catch was excepting to run');

  });

});