const glob = require('glob');
const path = require('path');
const logger = require('boring-logger')
const util = require('util');

globber = util.promisify(glob);

/**
 * Require all the files / folders
 * as modules in the given directory. 
 * 
 * Then the required module will be invoked
 * where the remaining arguments are passed 
 * as parameters uniformly to each module. 
 * 
 * Each module is expexted to return a function
 * to be exectued where the return function must 
 * return a promise 
 * 
 * @param {path to directory} directory 
 * @param  {...any} args 
 */
module.exports = async function requireAll(directories, ...args) {

  if (!(directories instanceof Array)) directories = [directories];

  logger.info(directories, 'Requring all modules in directories');

  const dirFiles = await Promise.all(directories.map(directory => {
    return globber(directory + '/*');
  }))

  const files = dirFiles.reduce((prev, cur) => {
    return prev.concat(cur);
  }, []).filter(file => {
    return file.indexOf('.map')<0;
  })
  
  const promiseList = files.map(async function(file) {
    let ret = require(file).apply(null, args)
    if (!(ret instanceof Promise)) {
      // wrap in a promise that is immediately resolved
      return new Promise((resolve, reject) => resolve(ret));
    }
    return ret
  });

  const results = await Promise.all(promiseList);
  
  return results.reduce(function(prev, val, index) {
    let basename = path.basename(files[index], '.js');
    prev[basename] = val;
    return prev;
  }, {});
  
}