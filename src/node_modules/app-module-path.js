const Module = require('module').Module;
const nodePath = require('path');

const appModulePaths = [];
const oldModeModulePaths = Module._nodeModulePaths;
const allowedDirs = {};

function checkIfDirAllowed(from) {
  let currentDir = from;

  if (currentDir.indexOf('/boringbits/')>0) {
    return true;
  }

  while (currentDir) {
    if (allowedDirs[currentDir]) {
      return true;
    }

    const basename = nodePath.basename(currentDir);
    if (basename === 'node_modules') {
      return false;
    }

    const parentDir = nodePath.dirname(currentDir);
    if (parentDir === currentDir) {
      break;
    }
    currentDir = parentDir;
  }

  return true;
}

Module._nodeModulePaths = function(from) {
  let paths = oldModeModulePaths.call(this, from);

  // Only include the app module path for top-level modules
  // that were not installed or that were explicitly allowed
  if (checkIfDirAllowed(from)) {
    paths = paths.concat(appModulePaths);
  }

  return paths;
};

function enableForDir(dir) {
  allowedDirs[dir] = true;
}

function addPath(path, parent) {
  // Anable app-module-path to work under any directories that are explicitly added
  enableForDir(path);

  function addPathHelper(targetArray) {
    path = nodePath.normalize(path);
    if (targetArray && targetArray.indexOf(path) === -1) {
      targetArray.push(path);
    }
  }

  path = nodePath.normalize(path);

  if (appModulePaths.indexOf(path) === -1) {
    appModulePaths.push(path);
    // Enable the search path for the current top-level module
    if (require.main) {
      addPathHelper(require.main.paths);
    }

    parent = parent || module.parent;

    // Also modify the paths of the module that was used to load the app-module-paths module
    // and all of it's parents
    while (parent && parent !== require.main) {
      addPathHelper(parent.paths);
      parent = parent.parent;
    }
  }
}

function removePath(path) {
  function removePathHelper(targetArray) {
    path = nodePath.normalize(path);
    if (!targetArray) return;
    const index = targetArray.indexOf(path);
    if (index === -1) return;
    targetArray.splice(index, 1);
  }

  let parent;
  path = nodePath.normalize(path);
  const index = appModulePaths.indexOf(path);

  if (index > -1) {
    appModulePaths.splice(index, 1);
    // Enable the search path for the current top-level module
    if (require.main) removePathHelper(require.main.paths);
    parent = module.parent;

    // Also modify the paths of the module that was used to load the app-module-paths module
    // and all of it's parents
    while (parent && parent !== require.main) {
      removePathHelper(parent.paths);
      parent = parent.parent;
    }
  }
}

exports.addPath = addPath;
exports.removePath = removePath;
exports.enableForDir = enableForDir;
